{
  "openapi": "3.0.0",
  "info": {
    "title": "Ethereum RPC API",
    "description": "Ethereum blockchain JSON-RPC API spec designed for the `eth_call` method.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://eth-mainnet.rpc.grove.city/v1/7ebb2846",
      "description": "Ethereum Mainnet RPC Server"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "eth_call",
        "summary": "Executes a new message call immediately without creating a transaction on the block chain. Often used for executing read-only smart contract functions, for example the balanceOf for an ERC-20 contract.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jsonrpc": {
                    "type": "string",
                    "example": "2.0"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["eth_call"],
                    "example": "eth_call"
                  },
                  "params": {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "properties": {
                          "from": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$",
                            "description": "DATA, 20 Bytes - The address the transaction is sent from. (optional)"
                          },
                          "to": {
                            "type": "string",
                            "pattern": "^0x[a-fA-F0-9]{40}$",
                            "description": "DATA, 20 Bytes - The address the transaction is directed to."
                          },
                          "gas": {
                            "type": "string",
                            "description": "QUANTITY - Gas provided for the transaction execution. (optional, default: 90000)"
                          },
                          "gasPrice": {
                            "type": "string",
                            "description": "QUANTITY - Gas price provided by the sender. (optional, default: To-Be-Determined) "
                          },
                          "value": {
                            "type": "string",
                            "description": "QUANTITY - Value transferred for the transaction. (optional)"
                          },
                          "input": {
                            "type": "string",
                            "description": "DATA - Hash of the method signature and encoded parameters. For details see Ethereum Contract ABI in the Solidity documentation(opens in a new tab). (optional)"
                          }
                        },
                        "required": ["to"]
                      },
                      {
                        "oneOf": [
                          {
                            "type": "string",
                            "description": "HEX String - an integer block number"
                          },
                          {
                            "type": "string",
                            "enum": [
                              "latest",
                              "earliest",
                              "pending",
                              "safe",
                              "finalized"
                            ],
                            "description": "Block parameter (e.g., 'latest', 'earliest', block number in hex)."
                          }
                        ]
                      }
                    ],
                    "minItems": 2,
                    "maxItems": 2,
                    "example": [
                      {
                        "from": "0x407d73d8a49eeb85d32cf465507dd71d507100c1",
                        "to": "0x85h43d8a49eeb85d32cf465507dd71d507100b1",
                        "gas": "0x76c0",
                        "gasPrice": "0x9184e72a000",
                        "value": "0x9184e72a",
                        "input": "0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675"
                      },
                      "latest"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/IdType"
                  }
                },
                "required": ["jsonrpc", "method", "params", "id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IdType": {
        "oneOf": [
          {
            "type": "integer",
            "example": 1
          },
          {
            "type": "string",
            "example": "myId"
          }
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "description": "DATA - the return value of executed contract.",
        "properties": {
          "jsonrpc": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "result": {
            "type": "string",
            "example": "0x"
          }
        },
        "required": ["jsonrpc", "id", "result"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "jsonrpc": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer"
              },
              "message": {
                "type": "string",
                "example": "Method not found"
              },
              "data": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["id", "jsonrpc", "error"]
      }
    }
  }
}
