{
  "openapi": "3.0.0",
  "info": {
    "title": "Ethereum RPC API",
    "description": "Ethereum blockchain JSON-RPC API spec designed for the `eth_newFilter` method.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://eth-mainnet.rpc.grove.city/v1/7ebb2846",
      "description": "Ethereum Mainnet RPC Server"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "eth_newFilter",
        "summary": "Returns an array of all logs matching a given filter object.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jsonrpc": {
                    "type": "string",
                    "example": "2.0"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["eth_newFilter"],
                    "example": "eth_newFilter"
                  },
                  "params": {
                    "type": "array",
                    "items": [
                      {
                        "type": "object",
                        "description": "Creates a filter object, based on filter options, to notify when the state changes (logs). To check if the state has changed, call eth_getFilterChanges. A note on specifying topic filters: Topics are order-dependent. A transaction with a log with topics [A, B] will be matched by the following topic filters: \n[] 'anything' \n[A] 'A in first position (and anything after)' \n[null, B] 'anything in first position AND B in second position (and anything after)' \n[A, B] 'A in first position AND B in second position (and anything after)' \n[[A, B], [A, B]] '(A OR B) in first position AND (A OR B) in second position (and anything after)'",
                        "properties": {
                          "fromBlock": {
                            "description": "QUANTITY|TAG - (optional, default: 'latest') Integer block number, or 'latest' for the last mined block, 'safe' for the latest safe block, 'finalized' for the latest finalized block, or 'pending', 'earliest' for not yet mined transactions.",
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "HEX String - an integer block number"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "latest",
                                  "earliest",
                                  "pending",
                                  "safe",
                                  "finalized"
                                ],
                                "description": "Block parameter (e.g., 'latest', 'earliest', block number in hex)."
                              }
                            ]
                          },
                          "toBlock": {
                            "description": "QUANTITY|TAG - (optional, default: 'latest') Integer block number, or 'latest' for the last mined block, 'safe' for the latest safe block, 'finalized' for the latest finalized block, or 'pending', 'earliest' for not yet mined transactions.",
                            "oneOf": [
                              {
                                "type": "string",
                                "description": "HEX String - an integer block number"
                              },
                              {
                                "type": "string",
                                "enum": [
                                  "latest",
                                  "earliest",
                                  "pending",
                                  "safe",
                                  "finalized"
                                ],
                                "description": "Block parameter (e.g., 'latest', 'earliest', block number in hex)."
                              }
                            ]
                          },
                          "address": {
                            "description": "DATA|Array, 20 Bytes - (optional) Contract address or a list of addresses from which logs should originate.",
                            "oneOf": [
                              {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{40}$",
                                "description": "DATA - Contract address"
                              },
                              {
                                "type": "array",
                                "description": "Array - List of addresses",
                                "items": [
                                  {
                                    "type": "string",
                                    "pattern": "^0x[a-fA-F0-9]{40}$",
                                    "description": "DATA - Contract address"
                                  }
                                ]
                              }
                            ]
                          },
                          "topics": {
                            "type": "array",
                            "description": "Array of DATA, - (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with 'or' options.",
                            "items": [
                              {
                                "type": "string",
                                "pattern": "^0x[a-fA-F0-9]{64}$",
                                "description": "DATA - Topics"
                              }
                            ]
                          }
                        }
                      }
                    ],
                    "minItems": 1,
                    "maxItems": 1,
                    "example": [
                      {
                        "fromBlock": "0x1",
                        "toBlock": "0x2",
                        "address": "0x8888f1f195afa192cfee860698584c030f4c9db1",
                        "topics": [
                          "0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                          null,
                          [
                            "0x000000000000000000000000a94f5374fce5edbc8e2a8697c15331677e6ebf0b",
                            "0x0000000000000000000000000aff3454fce5edbc8cca8697c15331677e6ebccc"
                          ]
                        ]
                      }
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/IdType"
                  }
                },
                "required": ["jsonrpc", "method", "params", "id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IdType": {
        "oneOf": [
          {
            "type": "integer",
            "example": 1
          },
          {
            "type": "string",
            "example": "myId"
          }
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "description": "QUANTITY - A filter id.",
        "properties": {
          "jsonrpc": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "result": {
            "type": "string",
            "example": "0x1"
          }
        },
        "required": ["jsonrpc", "id", "result"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "jsonrpc": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer"
              },
              "message": {
                "type": "string",
                "example": "Method not found"
              },
              "data": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["id", "jsonrpc", "error"]
      }
    }
  }
}
