{
  "openapi": "3.0.0",
  "info": {
    "title": "Ethereum RPC API",
    "description": "Ethereum blockchain JSON-RPC API spec designed for the `eth_getTransactionReceipt` method.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://eth-mainnet.rpc.grove.city/v1/7ebb2846",
      "description": "Ethereum Mainnet RPC Server"
    }
  ],
  "paths": {
    "/": {
      "post": {
        "operationId": "eth_getTransactionReceipt",
        "summary": "Returns the receipt of a transaction by transaction hash. Note That the receipt is not available for pending transactions.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "jsonrpc": {
                    "type": "string",
                    "example": "2.0"
                  },
                  "method": {
                    "type": "string",
                    "enum": ["eth_getTransactionReceipt"],
                    "example": "eth_getTransactionReceipt"
                  },
                  "params": {
                    "type": "array",
                    "items": [
                      {
                        "type": "string",
                        "pattern": "^0x[a-fA-F0-9]{64}$",
                        "description": "DATA, 32 Bytes - hash of a transaction"
                      }
                    ],
                    "minItems": 1,
                    "maxItems": 1,
                    "example": [
                      "0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5"
                    ]
                  },
                  "id": {
                    "$ref": "#/components/schemas/IdType"
                  }
                },
                "required": ["jsonrpc", "method", "params", "id"]
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/SuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorResponse"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "IdType": {
        "oneOf": [
          {
            "type": "integer",
            "example": 1
          },
          {
            "type": "string",
            "example": "myId"
          }
        ]
      },
      "SuccessResponse": {
        "type": "object",
        "description": "Object - A transaction receipt object, or null when no receipt was found.",
        "properties": {
          "jsonrpc": {
            "type": "string"
          },
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "result": {
            "type": "object",
            "description": "Transaction object",
            "properties": {
              "transactionHash": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{64}$",
                "description": "DATA, 32 Bytes - hash of the transaction."
              },
              "transactionIndex": {
                "type": "string",
                "description": "QUANTITY - integer of the transactions index position in the block."
              },
              "blockHash": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{64}$",
                "description": "DATA, 32 Bytes - hash of the block where this transaction was in."
              },
              "blockNumber": {
                "type": "string",
                "description": "QUANTITY - block number where this transaction was in."
              },
              "from": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "description": "DATA, 20 Bytes - address of the sender."
              },
              "to": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "description": "DATA, 20 Bytes - address of the receiver. null when its a contract creation transaction.",
                "nullable": true
              },
              "cumulativeGasUsed": {
                "type": "string",
                "description": "QUANTITY - The total amount of gas used when this transaction was executed in the block."
              },
              "effectiveGasPrice": {
                "type": "string",
                "description": "QUANTITY - The sum of the base fee and tip paid per unit of gas."
              },
              "gasUsed": {
                "type": "string",
                "description": "QUANTITY - The amount of gas used by this specific transaction alone."
              },
              "contractAddress": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{40}$",
                "description": "DATA, 20 Bytes - The contract address created, if the transaction was a contract creation, otherwise null.",
                "nullable": true
              },
              "logs": {
                "type": "string",
                "description": "Array - Array of log objects, which this transaction generated.",
                "items": [
                  {
                    "AnyValue": {}
                  }
                ]
              },
              "logsBloom": {
                "type": "string",
                "pattern": "^0x[a-fA-F0-9]{512}$",
                "description": "DATA, 256 Bytes - Bloom filter for light clients to quickly retrieve related logs."
              },
              "type": {
                "type": "string",
                "description": "QUANTITY - integer of the transaction type, 0x0 for legacy transactions, 0x1 for access list types, 0x2 for dynamic fees."
              },
              "root": {
                "type": "string",
                "description": "DATA 32 bytes of post-transaction stateroot (pre Byzantium). (optional)"
              },
              "status": {
                "type": "string",
                "description": "QUANTITY either 1 (success) or 0 (failure). (optional)"
              }
            },
            "required": [
              "transactionHash",
              "transactionIndex",
              "blockHash",
              "blockNumber",
              "from",
              "to",
              "cumulativeGasUsed",
              "effectiveGasPrice",
              "gasUsed",
              "contractAddress",
              "logs",
              "logsBloom",
              "type"
            ],
            "nullable": true,
            "example": {
              "blockHash": "0xa957d47df264a31badc3ae823e10ac1d444b098d9b73d204c40426e57f47e8c3",
              "blockNumber": "0xeff35f",
              "contractAddress": null,
              "cumulativeGasUsed": "0xa12515",
              "effectiveGasPrice": "0x5a9c688d4",
              "from": "0x6221a9c005f6e47eb398fd867784cacfdcfff4e7",
              "gasUsed": "0xb4c8",
              "logs": [],
              "logsBloom": "0x00...0",
              "status": "0x1",
              "to": "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
              "transactionHash": "0x85d995eba9763907fdf35cd2034144dd9d53ce32cbec21349d4b12823c6860c5",
              "transactionIndex": "0x66",
              "type": "0x2"
            }
          }
        },
        "required": ["jsonrpc", "id", "result"]
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "id": {
            "$ref": "#/components/schemas/IdType"
          },
          "jsonrpc": {
            "type": "string"
          },
          "error": {
            "type": "object",
            "properties": {
              "code": {
                "type": "integer"
              },
              "message": {
                "type": "string",
                "example": "Method not found"
              },
              "data": {
                "oneOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "object"
                  }
                ]
              }
            },
            "required": ["code", "message"]
          }
        },
        "required": ["id", "jsonrpc", "error"]
      }
    }
  }
}
